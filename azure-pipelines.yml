trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourceGroup: '1-9919a87d-playground-sandbox'
  location: 'southcentralus'
  acrName: '$(acrNameFromOutput)'
  azureServiceConnection: 'connect'

stages:
- stage: PrepareEnvironment
  displayName: 'Prepare Environment'
  jobs:
    - job: GetAcrName
      displayName: 'Get ACR Name'
      steps:
        - task: AzureCLI@2
          name: SetAcrName
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              ACR_NAME=$(az acr list --resource-group $(resourceGroup) --query "[0].name" -o tsv)
              echo "##vso[task.setvariable variable=acrNameFromOutput;isOutput=true]$ACR_NAME"
              echo "Found ACR: $ACR_NAME"

              if [ -z "$ACR_NAME" ]; then
                echo "Error: No ACR found in resource group. Exiting."
                exit 1
              fi

              ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
              ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
              ACR_LOGIN_SERVER="$ACR_NAME.azurecr.io"

              echo "##vso[task.setvariable variable=acrUsername;isOutput=true]$ACR_USERNAME"
              echo "##vso[task.setvariable variable=acrPassword;isOutput=true]$ACR_PASSWORD"
              echo "##vso[task.setvariable variable=acrLoginServer;isOutput=true]$ACR_LOGIN_SERVER"

- stage: BuildAndPush
  displayName: 'Build and Push Docker Images'
  dependsOn: PrepareEnvironment
  variables:
    acrNameFromOutput: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrNameFromOutput'] ]
    acrUsername: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrUsername'] ]
    acrPassword: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrPassword'] ]
    acrLoginServer: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrLoginServer'] ]
  jobs:
    - job: BuildMicroservices
      displayName: 'Build and Push Microservices'
      steps:
        - script: |
            echo "Logging in to ACR: $(acrLoginServer)"
            echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
          displayName: 'Login to ACR'

        - script: |
            services=("pitstop-customer" "pitstop-express-gateway" "pitstop-vehicle" "pitstop-webapp" "pitstop-workshop-planning")
            for service in "${services[@]}"
            do
              echo "Building and pushing $service..."
              docker build -t $(acrLoginServer)/$service:$(Build.BuildId) ./\$service
              docker tag $(acrLoginServer)/$service:$(Build.BuildId) $(acrLoginServer)/$service:latest
              docker push $(acrLoginServer)/$service:$(Build.BuildId)
              docker push $(acrLoginServer)/$service:latest
            done
          displayName: 'Build and Push Docker Images'
