apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: garage
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS dev_db;
    CREATE USER IF NOT EXISTS 'dev_user'@'%' IDENTIFIED BY 'dev1234567890';
    GRANT ALL PRIVILEGES ON dev_db.* TO 'dev_user'@'%';
    
    CREATE DATABASE IF NOT EXISTS prod_db;
    CREATE USER IF NOT EXISTS 'prod_user'@'%' IDENTIFIED BY 'prod1234567890';
    GRANT ALL PRIVILEGES ON prod_db.* TO 'prod_user'@'%';
    
    FLUSH PRIVILEGES;
---
# Customer Database StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: customer-database-statefulset
  namespace: garage
spec:
  serviceName: customer-database-service
  replicas: 1
  selector:
    matchLabels:
      app: customer-database
  template:
    metadata:
      labels:
        app: customer-database
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: customer-persistent-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: customer-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---
# Vehicle Database StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vehicle-database-statefulset
  namespace: garage
spec:
  serviceName: vehicle-database-service
  replicas: 1
  selector:
    matchLabels:
      app: vehicle-database
  template:
    metadata:
      labels:
        app: vehicle-database
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: vehicle-persistent-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: vehicle-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---
# Workshop Database StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: workshop-database-statefulset
  namespace: garage
spec:
  serviceName: workshop-database-service
  replicas: 1
  selector:
    matchLabels:
      app: workshop-database
  template:
    metadata:
      labels:
        app: workshop-database
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: workshop-persistent-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: workshop-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---
# Database Services
apiVersion: v1
kind: Service
metadata:
  name: customer-database-service
  namespace: garage
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: customer-database
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: vehicle-database-service
  namespace: garage
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: vehicle-database
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: workshop-database-service
  namespace: garage
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: workshop-database
  type: ClusterIP