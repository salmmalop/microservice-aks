trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourceGroup: '1-87cddd74-playground-sandbox'
  location: 'southcentralus'
  imageName: 'pitstop-customer'
  imageTag: '1.0.0-$(Build.BuildId)'
  azureServiceConnection: 'connect'

stages:
- stage: PrepareEnvironment
  displayName: 'Prepare Environment'
  jobs:
    - job: GetAcrInfo
      displayName: 'Get ACR Info'
      steps:
        - task: AzureCLI@2
          name: SetAcrInfo
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              ACR_NAME=$(az acr list --resource-group $(resourceGroup) --query "[0].name" -o tsv)
              if [ -z "$ACR_NAME" ]; then
                echo "##vso[task.logissue type=error]No ACR found in resource group."
                exit 1
              fi
              echo "##vso[task.setvariable variable=acrName;isOutput=true]$ACR_NAME"
              echo "##vso[task.setvariable variable=acrLoginServer;isOutput=true]$ACR_NAME.azurecr.io"
              ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
              ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
              echo "##vso[task.setvariable variable=acrUsername;isOutput=true]$ACR_USERNAME"
              echo "##vso[task.setvariable variable=acrPassword;isOutput=true]$ACR_PASSWORD"

- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  dependsOn: PrepareEnvironment
  variables:
    acrName: $[ stageDependencies.PrepareEnvironment.GetAcrInfo.outputs['SetAcrInfo.acrName'] ]
    acrLoginServer: $[ stageDependencies.PrepareEnvironment.GetAcrInfo.outputs['SetAcrInfo.acrLoginServer'] ]
    acrUsername: $[ stageDependencies.PrepareEnvironment.GetAcrInfo.outputs['SetAcrInfo.acrUsername'] ]
    acrPassword: $[ stageDependencies.PrepareEnvironment.GetAcrInfo.outputs['SetAcrInfo.acrPassword'] ]
  jobs:
    - job: DockerBuildPush
      displayName: 'Build and Push Docker Image'
      steps:
        - script: |
            echo "Logging in to ACR..."
            echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
          displayName: 'Login to ACR'

        - script: |
            cd pitstop-customer
            echo "Building Docker image..."
            docker build -t $(acrLoginServer)/$(imageName):$(imageTag) .
            docker tag $(acrLoginServer)/$(imageName):$(imageTag) $(acrLoginServer)/$(imageName):latest
            echo "Pushing Docker image to ACR..."
            docker push $(acrLoginServer)/$(imageName):$(imageTag)
            docker push $(acrLoginServer)/$(imageName):latest
          displayName: 'Build and Push Docker Image'
